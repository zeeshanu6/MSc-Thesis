import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
import numpy as np
from sklearn.preprocessing import LabelEncoder,OneHotEncoder
from datetime import datetime
from sklearn.metrics import r2_score, mean_squared_error,mean_squared_error,mean_absolute_error
import matplotlib.pyplot as plt

data = pd.read_csv("Rolling2023.csv")
data.head()

unique_programs = data['Programme'].unique()
print(unique_programs)
unique_programs.sort()

float_value = 1.0
program_to_float = {}
for program in unique_programs:
    
    program_to_float[program] = round(float_value, 2)
    float_value += 0.1  
print("Program to Float Mapping:")
for program, float_value in program_to_float.items():
    print(f"{program}: {float_value:.1f}")

colo_to_drop=['Application submission time','Anonymised ID','City and country of residence','Graduation year','Previous degree level','Educational agency','Priority','Country of previous university','Previous university','Previous degree']
data=data.drop(colo_to_drop,axis=1)

columns_to_replace = ['Offer','Accepted the offer','Registered']
data[columns_to_replace] = data[columns_to_replace].replace({'Yes': 1, np.nan: 0})

concatenated_values = pd.concat([data['Country of residence'], data['Citizenship']])
label_encoder = LabelEncoder()
concatenated_encoded = label_encoder.fit_transform(concatenated_values)
data['Country of residence'] = concatenated_encoded[:len(data)]
data['Citizenship'] = concatenated_encoded[len(data):]

columns_to_replace = ['Gender']
data[columns_to_replace] = data[columns_to_replace].replace({'male': 1, 'female': 0})

data['Programme'] = data['Programme'].map(program_to_float)

data['Date of birth'] = pd.to_datetime(data['Date of birth'], format='%d.%m.%Y', errors='coerce')
current_date = datetime.now()
data['Date of birth'] = (current_date - data['Date of birth']).dt.days // 365

data.head(100)

features = data[['Programme', 'Citizenship', 'Date of birth','Gender','Country of residence','Offer','Accepted the offer']]  
target=data['Registered']

X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42, shuffle=True)
print(X_train.shape, X_test.shape)

model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print("Model Accuracy:", accuracy)

total_ones = np.sum(y_pred == 1)
print("Total ones in test case:", total_ones)

importances = model.feature_importances_
print(importances)
feature_names = X_train.columns

indices = np.argsort(importances)[::-1]

plt.figure(figsize=(10, 6))
plt.title("Feature Importances")
plt.bar(range(X_train.shape[1]), importances[indices], align="center")
plt.xticks(range(X_train.shape[1]), feature_names[indices], rotation=90)
plt.xlabel("Feature")
plt.ylabel("Importance")
plt.tight_layout()
plt.show()

values = ('1.5', '44', '34', '0', '16', '1.0', '1.0')
values_array = np.array(values, dtype=float).reshape(1, -1)
result = model.predict(values_array)
print('outcome',result)

X_test=np.array(X_test)

registered=[]
for iter,p_value in enumerate(y_pred):
    if p_value== 1.0:
        registered.append(X_test[iter])

def program_name(program_to_float,value):
    for k,v in program_to_float.items():
        if v==value:
            return k
        
details_of_students=[]
temp=[]
def get_details(reg_students):
    for count in range (len(reg_students)):
        temp = []
        numbers=reg_students[count]
        city_res=label_encoder.inverse_transform((int(numbers[1]),int(numbers[4])))
        name_of_programe=program_name(program_to_float,numbers[0])
        # print(name_of_programe)
        # print(city_res)
        gen = 'Male' if numbers[3] == 1.0 else 'Female'
        temp.append(name_of_programe)
        temp.append(city_res)
        temp.append(gen)
        details_of_students.append(temp)
        
    return details_of_students
details_of_acceptance= get_details(registered)


for i in details_of_acceptance:
    print(i)

r_squared = r2_score(y_test, y_pred)
print("R-squared (Coefficient of determination):", r_squared)

rmse = np.sqrt(mean_squared_error(y_test, y_pred))
print("Root Mean Squared Error (RMSE):", rmse)

mae = np.sqrt(mean_absolute_error(y_test, y_pred))
print("Mean Absolute Error (MAE):", mae)

import matplotlib.pyplot as plt
from sklearn.tree import plot_tree

estimator = model.estimators_[0]
plt.figure(figsize=(15, 10))
plot_tree(estimator, 
          feature_names=X_train.columns,
          class_names=['0', '1'], 
          filled=True)
plt.show()

data.to_csv('modified_data.csv',index=False)

from sklearn.metrics import classification_report
report = classification_report(y_test, y_pred)
print(report)

import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay


cm = confusion_matrix(y_test, y_pred)
disp = ConfusionMatrixDisplay(confusion_matrix=cm)
disp.plot(cmap=plt.cm.Blues)

plt.show()

